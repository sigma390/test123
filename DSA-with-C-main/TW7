#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MAX 20000

int A[MAX];

void Quicksort( int low , int high);
int Partition(int low , int high);
void swap(int *p , int *q);

int main()
{
    int n, i;
    int low, high;

    clock_t s, e;
    double cpu_exe_t;

    printf("\nPlease enter the size of the array :");
    scanf("%d", &n);

    if(n > MAX) {
        printf("Array size exceeds maximum limit of %d\n", MAX);
        return 1;
    }

    for(i = 0; i < n; i++) {
        A[i] = rand() % 100; 
    }

    printf("\nThe array elements are :\n");
    for(i = 0; i < n; i++) {
        printf("%d\t", A[i]);
    }

    low = 0;
    high = n - 1;

    s = clock();
    Quicksort(low, high);
    e = clock();

    cpu_exe_t = (double)(e - s) / CLOCKS_PER_SEC;

    printf("\nThe sorted array is :\n");
    for(i = 0; i < n; i++) {
        printf("%d\t", A[i]);
    }

    printf("\nCPU execution time is %lf\n", cpu_exe_t);

    return 0;
}

int Partition(int low, int high)
{
    int i = low, j = high;
    int pivot = A[low];

    while(i < j) {
        while(i <= high && A[i] <= pivot) i++;
        while(j >= low && A[j] > pivot) j--;

        if(i < j) {
            swap(&A[i], &A[j]);
        }
    }

    swap(&A[low], &A[j]);

    return j;
}

void Quicksort(int low, int high)
{
    if(low < high) {
        int j = Partition(low, high);
        Quicksort(low, j - 1);
        Quicksort(j + 1, high);
    }
}

void swap(int *a, int *b)
{
    int t = *a;
    *a = *b;
    *b = t;
}
